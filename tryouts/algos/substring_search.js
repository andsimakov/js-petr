'use strict';

/*
Поиск подстроки на JavaScript

Формально задачу поиска подстроки (substring search) можно сформулировать следующим образом.
Пусть есть некоторый текст str символов с длиной N, и шаблон sub
с длиной n (n <= N) в виде строки. Если для некоторого значения i in [0; N - n + 1)
выполняется равенство str[i], ..., str [i + n - 1] = sub[0], ..., sub[n - 1],
т.е. если для всех j in [0; n) справедливо равенство sub[j] = str[i + j],
то будем говорить, что шаблон sub входит в текст str со сдвигом i.
Задача поиска подстроки состоит в определении сдвига, с которым шаблон sub входит
в текст str (или установлении того факта, что текст не содержит подстроки,
соответствующей шаблону). Проще говоря, нужно определить индекс i крайнего слева символа
первой соответствующей шаблону sub подстроки в тексте str.
Например, если str = "Lorem ipsum" и sub = "ips", то i=6.

Простейший алгоритм поиска состоит в непосредственной проверке всех возможных смещений.
Проверка заключается в последовательном сравнении символов шаблона sub с символами строки
str при первом же обнаруженном несовпадении символов проверка прекращается
и переменная внешнего цикла увеличивается на 1.
*/

// sub - искомая подстрока
// str - строка, в которой ищем
function substringSearch(sub, str) {
    var i,
        j,
        n = sub.length,
        N = str.length - n + 1;

    for (i = 0; i < N; i++) {
        j = 0;
        while (j < n && sub.charAt(j) === str.charAt(i + j)) j++;
        if (j === n) return i;
    }
    // На выходе индекс 1-го символа подстроки.

    // Если искомой подстроки нет в строке, то -1
    // Например, substringSearch('ips', 'Lorem ipsum') = 6,
    // substringSearch('dolor', 'Lorem ipsum') = -1.
    return -1;
}


const substr1 = 'ips';
const str1 = 'Lorem ipsum';
console.log(substringSearch(substr1, str1));

const substr2 = 'dolor';
const str2 = 'Lorem ipsum';
console.log(substringSearch(substr2, str2));
